#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')

require 'rubygems'
require 'terminal-table'
require 'gli'
require 'javaparse'
require 'jstats_version'

include GLI

program_desc 'Ouputs from the command line stats about your Java projects'

version Jstats::VERSION

#desc 'Describe some switch here'
#switch [:s,:switch]

#desc 'Describe some flag here'
#default_value 'the default'
#arg_name 'The name of the argument'
#flag [:f,:flagname]

desc 'Overall lines count (code, comments, blank) and output file sizes distribution'
arg_name 'Java source files location'
command :loc do |c|
  #c.desc 'Describe a switch to loc'
  #c.switch :s

  #c.desc 'Describe a flag to loc'
  #c.default_value 'default'
  #c.flag :f
  c.action do |global_options,options,args|
    java_files = JavaParse::JavaFiles.new(*args)
    files_count = java_files.count(:files)
    distrib = {(0...100) => 0, (100...200) => 0, (200...300) => 0, (300...400) => 0, (400...500) => 0, 
                (500...600) => 0, (600...700) => 0, (700...800) => 0, (800...900) => 0, (900...1000) => 0, (1000...5000) => 0 }
    java_files.java_units.each { |unit|
      file_line_count = unit.all_lines
      distrib.each_key { |range| 
        distrib[range] = distrib[range] + 1 if range.include? file_line_count
      }
    }
    
    rows = []
    rows << [java_files.count(:all_lines), java_files.count(:loc), java_files.count(:cloc), java_files.count(:bloc)]
    table = Terminal::Table.new :title => "Processing #{java_files.count} Java Files", :headings => ['All lines', 'Lines of code', 'Lines of comments', 'Blank lines' ], :rows => rows

    distrib_rows = []
    distrib.to_a.each { |d| distrib_rows << d}
    
    distrib_rows.each { |row|
      row.push(sprintf('%.1f', (row[1] * 100) / files_count.to_f) + ' %')
    }
    
    distrib_table = Terminal::Table.new :title => "Files size distribution", :headings => ['Lines range', 'Files in range', '  % ' ], :rows => distrib_rows

    puts table
    puts distrib_table
  end
end

desc 'Stats about methods sizes'
arg_name 'TODO'
command :methods do |c|
  c.action do |global_options,options,args|
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
